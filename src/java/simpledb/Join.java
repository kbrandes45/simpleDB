package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate pred;
    private OpIterator kid1;
    private OpIterator kid2;
    private Tuple current_left;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
    	this.kid1 = child1;
    	this.kid2 = child2;
    	this.pred = p;
    	this.current_left = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.pred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
    	int f1 = this.pred.getField1();
        return this.kid1.getTupleDesc().getFieldName(f1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
    	int f2 = this.pred.getField2();
        return this.kid2.getTupleDesc().getFieldName(f2);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
    	TupleDesc t1 = this.kid1.getTupleDesc();
    	TupleDesc t2 = this.kid2.getTupleDesc();
        return TupleDesc.merge(t1, t2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	if (this.kid1 != null && this.kid2 != null) {
    		super.open();
    		this.kid1.open();
    		this.kid2.open();
    	}
    	else {
    		throw new NoSuchElementException("no kid iterator");
    	}
    }

    public void close() {
        // some code goes here
    	super.close();
    	this.kid1.close();
    	this.kid2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	this.kid1.rewind();
    	this.kid2.rewind();
    	this.current_left = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

    	
    	while ((this.current_left != null)||this.kid1.hasNext()) {
    		Tuple t1;
    		if (this.current_left != null) {
    			t1 = this.current_left;
    		}
    		else {
    			t1 = this.kid1.next();
    			this.current_left = t1;
    		}
    		//System.out.print("current t1:"+t1.toString());
    		while (this.kid2.hasNext()) {
    			Tuple t2 = this.kid2.next();
    			//System.out.print(" current t2:"+t2.toString());
    			//System.out.print(" pred "+this.pred.getOperator().toString()+" field "+this.pred.getField1()+" "+this.pred.getField2());
    			if (this.pred.filter(t1, t2)) {
    				//project if pred is =, then project?
    				Tuple joined = new Tuple(this.getTupleDesc());
    				for (int i = 0; i<t1.getTupleDesc().numFields(); i++) {
    					Field f = t1.getField(i);
    					joined.setField(i, f);
    				}
    				for (int j = 0; j<t2.getTupleDesc().numFields(); j++) {
    					Field f = t2.getField(j);
    					joined.setField(j+t1.getTupleDesc().numFields(), f);
    				}
    				//System.out.print(" Joined "+joined.toString());
    				return joined;
    			}
    		}
    		this.current_left = null;
    		this.kid2.rewind();
    	}
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] {kid1,kid2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    	kid1 = children[0];
    	kid2 = children[1];
    }

}
